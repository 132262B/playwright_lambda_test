# Use the official AWS Lambda Node.js runtime as base
FROM public.ecr.aws/lambda/nodejs:20-arm64

# Install system dependencies for Chromium (Amazon Linux uses dnf)
RUN dnf update -y && \
    dnf install -y \
    atk \
    cups-libs \
    gtk3 \
    libXcomposite \
    libXcursor \
    libXdamage \
    libXext \
    libXi \
    libXrandr \
    libXScrnSaver \
    libXtst \
    pango \
    at-spi2-atk \
    libXt \
    xorg-x11-server-Xvfb \
    xorg-x11-xauth \
    dbus-glib \
    dbus-glib-devel \
    nss \
    mesa-libgbm \
    alsa-lib

# Copy package.json and install dependencies first
COPY package.json ${LAMBDA_TASK_ROOT}/
WORKDIR ${LAMBDA_TASK_ROOT}

# Update npm to latest version and install Node.js dependencies
RUN npm install -g npm@11.6.0 && npm install --production

# Set Playwright to install browsers in /tmp during Docker build, but we'll copy them to /opt
ENV PLAYWRIGHT_BROWSERS_PATH=/tmp/.cache/ms-playwright
RUN mkdir -p /tmp/.cache/ms-playwright && \
    npx playwright install chromium

# Copy browsers to /opt for Lambda runtime and set proper permissions
RUN mkdir -p /opt/ms-playwright && \
    cp -r /tmp/.cache/ms-playwright/* /opt/ms-playwright/ && \
    chmod -R 755 /opt/ms-playwright && \
    ls -la /opt/ms-playwright/

# Set Lambda runtime environment variables
ENV HOME=/tmp \
    XDG_CONFIG_HOME=/tmp \
    XDG_CACHE_HOME=/tmp \
    XDG_DATA_HOME=/tmp \
    XDG_STATE_HOME=/tmp \
    PLAYWRIGHT_BROWSERS_PATH=/opt/ms-playwright \
    FONTCONFIG_PATH=/tmp \
    FONTCONFIG_FILE=/tmp/fonts.conf

# Copy application code
COPY handler.js ${LAMBDA_TASK_ROOT}/
COPY offercent-login.test.js ${LAMBDA_TASK_ROOT}/
COPY playwright.config.js ${LAMBDA_TASK_ROOT}/

# Set the Lambda handler
CMD ["handler.runTest"]